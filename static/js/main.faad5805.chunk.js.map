{"version":3,"sources":["img/trivia.png","redux/reducers/reducers.js","redux/actions/actionTypes.js","redux/reducers/index.js","store/index.js","service/localStoragePlayer.js","Pages/Login.js","redux/actions/index.js","Components/Header.js","Components/Timer.js","Components/Question.js","service/fetchTriviaQuestions.js","service/localStorageRanking.js","Pages/Game.js","Pages/Settings.js","Pages/Feedback.js","Pages/Ranking.js","App.js","index.js"],"names":["module","exports","INITIAL_STATE","name","assertions","score","gravatarEmail","urlGame","playerReducer","state","action","type","payload","questionScore","assertion","category","difficulty","rootReducer","combineReducers","player","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","initGame","token","localStorage","setItem","Login","nome","email","isButtonDisabled","verifyInputs","length","setState","handleChange","event","target","value","fetchToken","fetch","response","json","data","handleClick","props","history","getPlayer","push","this","className","src","logo","alt","htmlFor","id","onChange","placeholder","data-testid","onClick","disabled","to","React","Component","defaultProps","PropTypes","func","connect","dispatch","Header","md5","toString","Timer","updateTimer","prevProps","isAnswered","time","intervalId","clearInterval","Question","answersList","correctAnswerIndex","isTimeOut","setInterval","prevState","calculateScore","isCorrect","question","easy","medium","hard","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","sort","Math","random","randomIndex","round","splice","nextQuestion","dangerouslySetInnerHTML","__html","map","answer","index","key","url","userToken","getItem","fetchQuestions","fetchTriviaQuestions","readStorageRanking","JSON","parse","saveScorePlayer","ranking","stringify","Game","questions","renderIndex","addPlayerToStorage","picture","storeRanking","handleAnswer","updateScore","results","removeItem","actUpdateScore","Settings","categories","changeUrl","trivia_categories","configGame","Feedback","Ranking","sorted","a","b","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faad5805.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import { GET_PLAYER, UPDATE_SCORE, CONFIG_URL } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  urlGame: 'https://opentdb.com/api.php?amount=5&token=',\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_PLAYER:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.gravatarEmail,\n      assertions: 0,\n      score: 0,\n    };\n  case UPDATE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.payload.questionScore,\n      assertions: state.assertions + action.payload.assertion,\n    };\n  case CONFIG_URL:\n    return {\n      ...state,\n      urlGame: `https://opentdb.com/api.php?amount=5${action.payload.category}${action.payload.difficulty}${action.payload.type}&token=`,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","export const GET_PLAYER = 'GET_PLAYER';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const CONFIG_URL = 'CONFIG_URL';\n","import { combineReducers } from 'redux';\nimport playerReducer from './reducers';\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n});\n\nexport default rootReducer;\n","import { legacy_createStore as createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../redux/reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","const initGame = (token) => localStorage.setItem('token', token);\n\nexport default initGame;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { actGetPlayer } from '../redux/actions';\nimport initGame from '../service/localStoragePlayer';\nimport logo from '../img/trivia.png';\nimport './styleSheet/Login.css';\n\nclass Login extends React.Component {\n  state = {\n    nome: '',\n    email: '',\n    isButtonDisabled: true,\n  }\n\n  verifyInputs = () => {\n    const { nome, email } = this.state;\n    if (nome.length < 1 || email.length < 1) {\n      this.setState({ isButtonDisabled: true });\n    } else {\n      this.setState({ isButtonDisabled: false });\n    }\n  };\n\n  handleChange = (event) => {\n    const { target: { value, name } } = event;\n    this.setState({ [name]: value }, this.verifyInputs);\n  };\n\n  fetchToken = async () => {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    return data.token;\n  }\n\n  handleClick = async () => {\n    const { history, getPlayer } = this.props;\n    const { nome, email } = this.state;\n    const token = await this.fetchToken();\n    initGame(token);\n    getPlayer(nome, email);\n    history.push('/trybe-trivia-react-redux/game');\n  }\n\n  render() {\n    const {\n      handleChange,\n      handleClick,\n      state: {\n        nome,\n        email,\n        isButtonDisabled,\n      },\n    } = this;\n    return (\n      <form className=\"form-login\">\n        <header className=\"login-header\">\n          <img src={ logo } className=\"login-logo\" alt=\"logo\" />\n        </header>\n        <label htmlFor=\"nome-input\">\n          <input\n            type=\"text\"\n            id=\"nome-input\"\n            name=\"nome\"\n            value={ nome }\n            onChange={ handleChange }\n            placeholder=\"Name\"\n            data-testid=\"input-player-name\"\n          />\n        </label>\n        <label htmlFor=\"email-input\">\n          <input\n            type=\"text\"\n            id=\"email-input\"\n            data-testid=\"input-gravatar-email\"\n            name=\"email\"\n            value={ email }\n            onChange={ handleChange }\n            placeholder=\"Email\"\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"btn-play\"\n          onClick={ handleClick }\n          disabled={ isButtonDisabled }\n          className=\"button-play\"\n        >\n          Play\n        </button>\n        <Link to=\"/trybe-trivia-react-redux/settings\">\n          <button type=\"button\" data-testid=\"btn-settings\" className=\"button-settings\">\n            Configurações\n          </button>\n        </Link>\n      </form>);\n  }\n}\n\nLogin.propTypes = {\n  getPlayer: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n};\n\nLogin.defaultProps = {\n  history: {\n    push: PropTypes.func,\n  },\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getPlayer: (nome, email) => dispatch(actGetPlayer(nome, email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import { GET_PLAYER, UPDATE_SCORE, CONFIG_URL } from './actionTypes';\n\nexport const actGetPlayer = (name, gravatarEmail) => ({\n  type: GET_PLAYER,\n  payload: {\n    name, gravatarEmail,\n  },\n});\n\nexport const actUpdateScore = (questionScore, assertion) => ({\n  type: UPDATE_SCORE,\n  payload: {\n    questionScore,\n    assertion,\n  },\n});\n\nexport const updateUrl = (configGame) => ({\n  type: CONFIG_URL,\n  payload: { ...configGame },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport './styleSheet/Header.css';\nimport logo from '../img/trivia.png';\n\nclass Header extends React.Component {\n  render() {\n    const { name, gravatarEmail, score } = this.props;\n    return (\n      <header>\n        <img src={ logo } className=\"header-logo\" alt=\"logo\" />\n        <div className=\"player-contaniner\">\n          <div className=\"player-info-container\">\n            {/* Funciona tchê */}\n            <p data-testid=\"header-player-name\">\n              { name }\n            </p>\n            <span>Pontuação:</span>\n            <span data-testid=\"header-score\">\n              { score }\n            </span>\n          </div>\n          <img\n            data-testid=\"header-profile-picture\"\n            src={ `https://www.gravatar.com/avatar/${md5(gravatarEmail).toString()}` }\n            alt=\"imagem usuario\"\n            className=\"player-image\"\n          />\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styleSheet/Timer.css';\n\nclass Timer extends React.Component {\n  componentDidMount() {\n    const { updateTimer } = this.props;\n    updateTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isAnswered, time, intervalId } = prevProps;\n    if (isAnswered || time === 1) {\n      clearInterval(intervalId);\n    }\n  }\n\n  render() {\n    const { time } = this.props;\n    return (\n      <div>\n        <p className=\"timer\" data-testid=\"timer-question\">{ time }</p>\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  time: PropTypes.number.isRequired,\n  isAnswered: PropTypes.bool.isRequired,\n  intervalId: PropTypes.number.isRequired,\n  updateTimer: PropTypes.func.isRequired,\n};\n\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer';\nimport './styleSheet/Question.css';\n\nclass Question extends React.Component {\n  state = {\n    answersList: [],\n    correctAnswerIndex: 0,\n    time: 30,\n    isTimeOut: false,\n    intervalId: 0,\n  }\n\n  componentDidMount() {\n    const {\n      question: {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers,\n      },\n    } = this.props;\n    const shuffle = 0.5;\n\n    const answersList = [...incorrectAnswers]\n      .sort(() => shuffle - Math.random());\n\n    const randomIndex = Math.round(Math.random() * incorrectAnswers.length);\n    answersList.splice(randomIndex, 0, correctAnswer);\n\n    this.setState({\n      answersList,\n      correctAnswerIndex: randomIndex,\n    });\n  }\n\n  // Função para atualizar o Timer\n  updateTimer = () => {\n    const ONE_SECOND = 1000;\n    const intervalId = setInterval(\n      () => this.setState((prevState) => ({ time: prevState.time - 1 }), () => {\n        const { time } = this.state;\n        if (time === 0) this.setState({ isTimeOut: true });\n      }),\n      ONE_SECOND,\n    );\n    this.setState({ intervalId });\n  }\n\n  calculateScore = (isCorrect) => {\n    const {\n      props: {\n        handleClick,\n        question: { difficulty },\n      },\n      state: { time },\n    } = this;\n    const BASE_SCORE = 10;\n    const difficultyScore = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    const TOTAL_SCORE = isCorrect === true\n      ? BASE_SCORE + (time * difficultyScore[difficulty])\n      : 0;\n    handleClick(TOTAL_SCORE);\n  }\n\n  render() {\n    const {\n      props: {\n        question: {\n          category,\n          difficulty,\n          question,\n        },\n        isAnswered,\n        nextQuestion,\n      },\n      state: {\n        answersList,\n        correctAnswerIndex,\n        time,\n        intervalId,\n        isTimeOut,\n      },\n      calculateScore,\n    } = this;\n    return (\n      <section className=\"question-container\">\n        <div className=\"question-header-container\">\n          <div className=\"question-info-container\">\n            <h4 data-testid=\"question-category\">{ category }</h4>\n            <h4>{ `( ${difficulty} )` }</h4>\n          </div>\n          <Timer\n            time={ time }\n            intervalId={ intervalId }\n            isAnswered={ isAnswered }\n            updateTimer={ this.updateTimer }\n          />\n        </div>\n        <h2\n          data-testid=\"question-text\"\n          dangerouslySetInnerHTML={ { __html: question } }\n        />\n        <div className=\"answers-container\" data-testid=\"answer-options\">\n          {\n            answersList.map((answer, index) => {\n              if (index === correctAnswerIndex) {\n                return (\n                  <button\n                    data-testid=\"correct-answer\"\n                    type=\"button\"\n                    key={ answer }\n                    onClick={ () => calculateScore(true) }\n                    className={ isAnswered ? 'correct' : 'no-border' }\n                    disabled={ isTimeOut }\n                    dangerouslySetInnerHTML={ { __html: answer } }\n                  >\n                    {/* { answer } */}\n                  </button>\n                );\n              }\n              return (\n                <button\n                  data-testid={ `wrong-answer-${index}` }\n                  type=\"button\"\n                  key={ answer }\n                  onClick={ () => calculateScore(false) }\n                  className={ isAnswered ? 'wrong' : 'no-border' }\n                  disabled={ isTimeOut }\n                  dangerouslySetInnerHTML={ { __html: answer } }\n                >\n                  {/* { answer } */}\n                </button>\n              );\n            })\n          }\n        </div>\n        <div>\n          {\n            (isAnswered || isTimeOut) && (\n              <button\n                data-testid=\"btn-next\"\n                type=\"button\"\n                onClick={ nextQuestion }\n                className=\"next-button\"\n              >\n                Next\n              </button>\n            )\n          }\n        </div>\n      </section>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  question: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n    difficulty: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n    question: PropTypes.string.isRequired,\n  }).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  isAnswered: PropTypes.bool.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n};\n\nexport default Question;\n","async function fetchTriviaQuestions(url) {\n  const userToken = localStorage.getItem('token');\n\n  const fetchQuestions = await fetch(`${url}${userToken}`);\n  const data = await fetchQuestions.json();\n  return data;\n}\n\nexport default fetchTriviaQuestions;\n","export const readStorageRanking = () => JSON.parse(localStorage.getItem('ranking'));\n\nexport const saveScorePlayer = (ranking) => {\n  const data = readStorageRanking();\n  localStorage.setItem('ranking', JSON.stringify([...data, ranking]));\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport Header from '../Components/Header';\nimport Question from '../Components/Question';\nimport fetchTriviaQuestions from '../service/fetchTriviaQuestions';\nimport { actUpdateScore } from '../redux/actions';\nimport { saveScorePlayer } from '../service/localStorageRanking';\nimport './styleSheet/Game.css';\n\nclass Game extends React.Component {\n  state = {\n    questions: [],\n    renderIndex: 0,\n    isAnswered: false,\n  }\n\n  async componentDidMount() {\n    const { history, url } = this.props;\n    const { results } = await fetchTriviaQuestions(url);\n    if (!results.length) {\n      localStorage.removeItem('token');\n      history.push('/');\n    }\n\n    this.setState({\n      questions: [...results],\n    });\n  }\n\n  nextQuestion = () => {\n    const {\n      props: { history },\n    } = this;\n    const { renderIndex } = this.state;\n    const LAST_INDEX = 4;\n    if (renderIndex === LAST_INDEX) {\n      history.push('/trybe-trivia-react-redux/feedback');\n      this.addPlayerToStorage();\n    } else {\n      this.setState((prevState) => ({\n        renderIndex: prevState.renderIndex + 1,\n        isAnswered: false,\n      }));\n    }\n  }\n\n  addPlayerToStorage = () => {\n    const { ranking } = this.props;\n    const picture = `https://www.gravatar.com/avatar/${md5(ranking.picture).toString()}`;\n    const storeRanking = { ...ranking, picture };\n    if (!JSON.parse(localStorage.getItem('ranking'))) {\n      localStorage.setItem('ranking', JSON.stringify([storeRanking]));\n    } else {\n      saveScorePlayer(storeRanking);\n    }\n  }\n\n  // Evento de resposta do usuário\n  handleAnswer = (questionScore) => {\n    const { updateScore } = this.props;\n    this.setState({ isAnswered: true });\n\n    if (questionScore === 0) {\n      updateScore(questionScore, 0);\n    } else {\n      updateScore(questionScore, 1);\n    }\n  }\n\n  render() {\n    const {\n      state: {\n        questions,\n        renderIndex,\n        isAnswered,\n      },\n      handleAnswer,\n      nextQuestion,\n    } = this;\n    return (\n      <main className=\"game-main-container\">\n        <Header />\n        {\n          questions.map((question, index) => (\n            <section key={ question.question }>\n              {\n                renderIndex === index && (\n                  <Question\n                    handleClick={ handleAnswer }\n                    question={ question }\n                    isAnswered={ isAnswered }\n                    nextQuestion={ nextQuestion }\n                  />\n                )\n              }\n            </section>\n          ))\n        }\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ranking: {\n    name: state.player.name,\n    score: state.player.score,\n    picture: state.player.gravatarEmail,\n  },\n  url: state.player.urlGame,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (score, assertion) => dispatch(actUpdateScore(score, assertion)),\n});\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  updateScore: PropTypes.func.isRequired,\n  ranking: PropTypes.shape({\n    picture: PropTypes.string,\n  }).isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nGame.defaultProps = {\n  history: {\n    push: PropTypes.func,\n  },\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateUrl } from '../redux/actions';\nimport './styleSheet/Settings.css';\n\nclass Settings extends React.Component {\n  state = {\n    categories: [],\n    category: '',\n    difficulty: '',\n    type: '',\n  }\n\n  async componentDidMount() {\n    const response = await fetch('https://opentdb.com/api_category.php');\n    const data = await response.json();\n    this.setState({ categories: data.trivia_categories });\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  }\n\n  handleClick = () => {\n    const { category, difficulty, type } = this.state;\n    const { changeUrl, history } = this.props;\n\n    changeUrl({ category, difficulty, type });\n    history.push('/trybe-trivia-react-redux');\n  }\n\n  render() {\n    const { categories, category, difficulty, type } = this.state;\n    return (\n      <main>\n        <section className=\"settings-container\">\n          <h1 className=\"title\" data-testid=\"settings-title\">Configurações</h1>\n          <label htmlFor=\"select-category\">\n            Categorias:\n            <select\n              name=\"category\"\n              onChange={ this.handleChange }\n              value={ category }\n              id=\"select-category\"\n            >\n              <option value=\"\">All</option>\n              {\n                categories.map(({ id, name }) => (\n                  <option key={ id } value={ `&category=${id}` }>{ name }</option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"select-difficulty\">\n            Dificuldade:\n            <select\n              name=\"difficulty\"\n              onChange={ this.handleChange }\n              value={ difficulty }\n              id=\"select-difficulty\"\n            >\n              <option value=\"\">All</option>\n              <option value=\"&difficulty=easy\">Fácil</option>\n              <option value=\"&difficulty=medium\">Médio</option>\n              <option value=\"&difficulty=hard\">Dificil</option>\n            </select>\n          </label>\n          <label htmlFor=\"select-type\">\n            Tipos de questão:\n            <select\n              name=\"type\"\n              onChange={ this.handleChange }\n              value={ type }\n              id=\"select-type\"\n            >\n              <option value=\"\">All</option>\n              <option value=\"&type=multiple\">Múltipla escolha</option>\n              <option value=\"&type=boolean\">Verdadeiro ou Falso</option>\n            </select>\n          </label>\n          <button type=\"button\" onClick={ this.handleClick }>Salvar</button>\n        </section>\n      </main>\n    );\n  }\n}\n\nSettings.propTypes = {\n  changeUrl: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeUrl: (state) => dispatch(updateUrl(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { FaRegGrinBeamSweat } from 'react-icons/fa';\nimport { RiEmotionSadLine } from 'react-icons/ri';\nimport Header from '../Components/Header';\nimport './styleSheet/Feedback.css';\n\nclass Feedback extends React.Component {\n  render() {\n    const { assertions, score } = this.props;\n    const MIN_ASSERTIONS = 3;\n    return (\n      <main className=\"feedback\">\n        <Header />\n        <h1>Feedback</h1>\n        {\n          (assertions < MIN_ASSERTIONS)\n            ? (\n              <div className=\"better\">\n                <h2 data-testid=\"feedback-text\">Could be better...</h2>\n                <RiEmotionSadLine className=\"sad-icon\" />\n              </div>\n            )\n            : (\n              <div className=\"well-done\">\n                <h2 data-testid=\"feedback-text\">Well Done!</h2>\n                <FaRegGrinBeamSweat className=\"happy-icon\" />\n              </div>\n            )\n        }\n        <section className=\"points\">\n          <span>Pontuação:</span>\n          <span data-testid=\"feedback-total-score\">{ score }</span>\n          <span>Acertos:</span>\n          <span data-testid=\"feedback-total-question\">{ assertions }</span>\n        </section>\n        <div className=\"buttons\">\n          <Link to=\"/trybe-trivia-react-redux/ranking\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n              className=\"button-ranking\"\n            >\n              VER RANKING\n            </button>\n          </Link>\n          <Link to=\"/trybe-trivia-react-redux\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              className=\"button-play-again\"\n            >\n              JOGAR NOVAMENTE\n            </button>\n          </Link>\n        </div>\n      </main>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\nimport { readStorageRanking } from '../service/localStorageRanking';\nimport './styleSheet/Ranking.css';\n\nclass Ranking extends React.Component {\n  state = {\n    ranking: [],\n  }\n\n  componentDidMount() {\n    const data = readStorageRanking();\n    const sorted = data.sort((a, b) => (b.score - a.score));\n    this.setState({ ranking: sorted });\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"ranking\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <div className=\"ranking-box\">\n          { ranking.map((score, index) => (\n            <div\n              className=\"ranked-user\"\n              key={ index }\n            >\n              <img\n                className=\"ranked-user-image\"\n                src={ score.picture }\n                alt={ `imagem ${score.name}` }\n              />\n              <h3 data-testid={ `player-name-${index}` }>{ score.name }</h3>\n              <h3\n                className=\"ranked-user-score\"\n                data-testid={ `player-score-${index}` }\n              >\n                { score.score }\n              </h3>\n            </div>\n          ))}\n        </div>\n        <Link to=\"/trybe-trivia-react-redux\">\n          <button\n            className=\"button-home\"\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n          >\n            Voltar para o início\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './Pages/Login';\nimport Game from './Pages/Game';\nimport Settings from './Pages/Settings';\nimport Feedback from './Pages/Feedback';\nimport Ranking from './Pages/Ranking';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/trybe-trivia-react-redux/feedback\" component={ Feedback } />\n        <Route path=\"/trybe-trivia-react-redux/game\" component={ Game } />\n        <Route path=\"/trybe-trivia-react-redux/settings\" component={ Settings } />\n        <Route exact path=\"/trybe-trivia-react-redux\" component={ Login } />\n        <Route path=\"/trybe-trivia-react-redux/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}